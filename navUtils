-- Api to help with turtle navigation consistancy between reloads

-- Should this turtle attempt to use GPS?
useGPS = true

-- The tutle's current coordinates. May be in world space or custom space depending on setup.
local coordinates = vector.new(0,0,0)

directions = {"north", "east", "south", "west"}
local direction = "north"

-- Is this turtle successfully able to use GPS?
hasGPS = false


-- Is the navigation initialized?
local initialized = false

--- Initialize the turtle's navigation system. Required for proper navigation.
-- @return Success
function init()
	-- Attempt GPS callibration
	local gpsSuccess = false
	if useGPS and callibrateGPS() then
		hasGPS = true
		initialized = true
		saveCoordFile()
		return true
	elseif loadCoordFile() then
		hasGPS = false
		initialized = true
		return true
	else
		hasGPS = false
		return false
	end
end

function getCoordinates()
	return coordinates
end

function getDirection()
	return direction
end

function isInitialized()
	return initialized
end

function isGPS()
	return hasGPS
end

--- Attempt to use GPS to callibrate the turtle's location and rotation
-- @return Success
function callibrateGPS()
	if gps.locate(1) == nil then
		return false
	end	
	
	coordinates = vector.new(gps.locate(5))
	local success = false
	
	-- Callibrate rotation
	while not success do
		success = turtle.forward()
		if not success then
			turtle.turnRight()
		end
	end
	
	local newLocation = vector.new(gps.locate(5))
	
	if newLocation['z'] < coordinates['z'] then
		direction = "north"
	elseif newLocation['z'] > coordinates['z'] then
		direction = "south"
	elseif newLocation['x'] < coordinates['x'] then
		direction = "west"
	elseif newLocation['x'] > coordinates['x'] then
		direction = "east"
	else
		print("Unable to callibrate rotation")
		return false
	end
	
	turtle.back()
	return true
end

--- Save current coordinates and rotation into internal file
function saveCoordFile()
	local file = fs.open("localCoords", 'w')
	file.writeLine("coordinates = vector.new("..coordinates.x..','..coordinates.y..','..coordinates.z..')')
	file.writeLine("direction = '"..direction.."'")
	file.close()
end

--- Load and save the values from internal file into memory
-- @return Success

function loadCoordFile()
	if not os.loadAPI("localCoords") then
		print("Please supply an internal coordinate file!")
		return false
	end
	coordinates = localCoords.coordinates
	direction = localCoords.direction
	os.unloadAPI("localCoords")
	return true
end

--- Change the coordinates by amount in direction of turtle
-- @param (number) num Amount to change
function incrementCoords(num)
	if hasGPS then
		coordinates = vector.new(gps.locate(1))
	elseif direction == "north" then
		coordinates.z = coordinates.z - num
	elseif direction == "south" then
		coordinates.z = coordinates.z + num
	elseif direction == "west" then
		coordinates.x = coordinates.x - num
	elseif direction == "east" then
		coordinates.x = coordinates.x + num
	else
		print("Unknown direction: "..tostring(direction))
	end
	saveCoordFile()
end

--- Move the turtle forward 1 block
-- @return Success
function forward()
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end
	
	if turtle.forward() then
		incrementCoords(1)
		return true
	end
	return false
end

--- Move the turtle back 1 block
-- @return Success
function back()
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end
	
	if turtle.back() then
		incrementCoords(-1)
		return true
	end
	return false
end

--- Move the turtle up 1 block
-- @return success
function up()
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end

	if turtle.up() then
		if hasGPS then
			coordinates = vector.new(gps.locate(1))
		else
			coordinates.y = coordinates.y + 1
		end
		saveCoordFile()
		return true
	else return false end
end

--- Move the turtle down 1 block
-- @return success
function down()
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end
	
	if turtle.down() then
		if hasGPS then
			coordinates = vector.new(gps.locate(1))
		else
			coordinates.y = coordinates.y - 1
		end
		saveCoordFile()
		return true
	else return false end
end

--- Turn the turtle left
-- @return Success
function turnLeft()
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end

	if turtle.turnLeft() then
		-- Handle specific west-north scenareo
		if direction == "north" then
			direction = "west"
		else
			direction = directions[getIndexOfValue(directions, direction) - 1]
		end
		saveCoordFile()
		return true
	else return false end
end

--- Turn the turtle right
-- @return Success
function turnRight()
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end

	if turtle.turnRight() then
		-- Handle specific west-north scenareo
		if direction == "west" then
			direction = "north"
		else
			direction = directions[getIndexOfValue(directions, direction) + 1]
		end
		saveCoordFile()
		return true
	else return false end
end

--- Face a particular direction
-- @param (string) Direction to face
function faceDirection(newDirection)
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end
	
	-- Check direction is valid
	if not tableContains(directions, direction) then
		error(newDirection.." is not a valid direction.")
		return
	end
	if direction == newDirection then
		return
	end
	
	-- Find how far we have to turn
	local distance = math.abs(getIndexOfValue(directions,direction) - getIndexOfValue(directions, newDirection))
	
	-- Handle specific west-north scenareo
	if direction == "north" and newDirection == "west" then
		turtle.turnLeft()
	elseif direction == "west" and newDirection == "north" then
		turtle.turnRight()
	
	-- if the new direction is conterclockwize of the current one, turn left
	elseif getIndexOfValue(directions, newDirection) < getIndexOfValue(directions, direction) then
		for i=1,distance,1 do
			turtle.turnLeft()
		end
	elseif getIndexOfValue(directions, newDirection) > getIndexOfValue(directions, direction) then
		for i=1,distance,1 do
			turtle.turnRight()
		end
	end
	
	direction = newDirection
end

--- Go to a particular x coordinate (may change rotation)
-- @param (number) targetX X coordinate to go
-- @param (boolean) allowBreak Allow block breaking
-- @return success
function goToX(targetX, allowBreak)
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end
	
	-- Face correct direction
	if coordinates.x == targetX then
		return true
	elseif coordinates.x > targetX then
		faceDirection('west')
	elseif coordinates.x < targetX then
		faceDirection('east')
	end
	
	while coordinates.x ~= targetX do
		-- Attempt to go forward. If we can't and are allowed to, break a block.
		if not forward() then
			-- We still might not be able to move (ex. out of fuel)
			if allowBreak then
				turtle.dig()
				if not forward() then return false end
			else return false end
		end
	end
	
	return true
end

--- Go to a particular z coordinate (may change rotation)
-- @param (number) targetZ Z coordinate to go
-- @param (boolean) allowBreak Allow block breaking
-- @return success
function goToZ(targetZ, allowBreak)
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end
	
	-- Face correct direction
	if coordinates.z == targetZ then
		return true
	elseif coordinates.z > targetZ then
		faceDirection('north')
	elseif coordinates.z < targetZ then
		faceDirection('south')
	end
	
	while coordinates.z ~= targetZ do
		-- Attempt to go forward. If we can't and are allowed to, break a block.
		if not forward() then
			-- We still might not be able to move (ex. out of fuel)
			if allowBreak then
				turtle.dig()
				if not forward() then return false end
			else return false end
		end
	end
	
	return true
end

--- Go to a particular y coordinate
-- @param (number) targetY Y coordinate to go
-- @param (boolean) allowBreak Allow block breaking
-- @return success
function goToY(targetY, allowBreak)
	if not isInitialized() then
		error("Navigation system is not initialized!")
		return false
	end
	
	-- Face correct direction
	if coordinates.y == targetY then
		return true
	
	-- Go up
	elseif coordinates.y < targetY then
		while coordinates.y ~= targetY do
			-- Attempt to go up. If we can't and are allowed to, break a block.
			if not up() then
				-- We still might not be able to move (ex. out of fuel)
				if allowBreak then
					turtle.digUp()
					if not up() then return false end
				else return false end
			end
		end
		
	-- Go down
	elseif coordinates.y > targetY then
		while coordinates.y ~= targetY do
			-- Attempt to go down. If we can't and are allowed to, break a block.
			if not down() then
				-- We still might not be able to move (ex. out of fuel)
				if allowBreak then
					turtle.digDown()
					if not down() then return false end
				else return false end
			end
		end
	end
	
	return true
end

--- Go to a set of coordinates (may change rotation
-- @param (vector) coords Coordinates to go to
-- @param (boolean) allowBreak Allow block breaking
function goToCoords(coords, allowBreak)
	return (goToX(coords.x, allowBreak) and goToZ(coords.z, allowBreak) and goToY(coords.y, allowBreak))
end
-- INTERNAL FUNCTIONS

-- Locate an item in a table
function getIndexOfValue(tab, val)
	local index={}
	for k,v in pairs(tab) do
		index[v]=k
	end
	return index[val]
end

-- Check if a table has a value
function tableContains(tab, val)
    for index, value in ipairs(tab) do
        if value == val then
            return true
        end
    end
    return false
end